#!/usr/bin/env bash
# =========================================================
# Copyright 2020,  Nuno A. Fonseca (nuno dot fonseca at gmail dot com)
#
#
# This is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this code.  If not, see <http://www.gnu.org/licenses/>.
#
#
# =========================================================

set -u -o pipefail


##################################################
#
#################################################


function usage {
    cat <<EOF
emg_fasta_qalign -q query_fasta_file -r reference_fasta_file -o out_file [-h -D -c -b -B]

 -b                  : use bowtie1
 -B                  : use bowtie2
 -c                  : use cached index
 -t threads          : number of threads to use
 -D                  : enable debugging
 -h                  : provides usage information
EOF
}

function pinfo {
    echo "[INFO] $*"
}

OUT_FILE=
QUERY_FILE=
REF_FILE=
THREADS=2
bowtie_version=1
use_cached_index=0
###########################################################
##
## check the options
##
###########################################################

while getopts "cbBhDq:r:o:t:"  Option; do
    case $Option in
	c) use_cached_index=1;;
	b) bowtie_version=1;;
	B) bowtie_version=2;;
	q) QUERY_FILE=$OPTARG;;
	r) REF_FILE=$OPTARG;;
	o) OUT_FILE=$OPTARG;;
	t) THREADS=$OPTARG;;
	D) set -eux;;
	h) usage; exit;;
    esac
done



if [ "$OUT_FILE-" == "-" ];  then
    usage
    exit 2
fi
if [ "$QUERY_FILE-" == "-" ];  then
    usage
    exit 2
fi
if [ "$REF_FILE-" == "-" ];  then
    usage
    exit 2
fi

for f in $REF_FILE $QUERY_FILE; do
    if [ ! -e $f ]; then
	echo "File $f not found"
	exit 2
    fi
done

REF_DB=${REF_FILE}.db$bowtie_version
COMMANDS_NEEDED="bowtie bowtie-build"
if [ $bowtie_version == "1" ]; then
    COMMANDS_NEEDED="bowtie bowtie-build"
    INDEX_PARAMS="--large-index -f --ntoa --threads $THREADS"
    INDEX_CMD=bowtie-build
    QUERY_PARAMS="-f -v 3 --large-index --fullref -p $THREADS --sam --no-unal $REF_DB  $QUERY_FILE"
    QUERY_CMD=bowtie    
else
    COMMANDS_NEEDED="bowtie2 bowtie2-build"
    INDEX_PARAMS="--large-index -f --threads $THREADS"
    INDEX_CMD=bowtie2-build
    QUERY_PARAMS="-k 10 -f --large-index --end-to-end  --sam-no-qname-trunc -p $THREADS --no-unal -x $REF_DB -U $QUERY_FILE"
    QUERY_CMD=bowtie2

fi

##################################################
#
# 
# 
for cmd in $COMMANDS_NEEDED; do
    command -v $cmd  >/dev/null 2>&1 || { echo "ERROR: $cmd  does not seem to be installed.  Aborting." >&2; exit 1; }
done

###############################################
# create index

pinfo "Indexing $REF_FILE..."
if [ "$use_cached_index" == "1" ] && [ -e $REF_DB.done ]; then
    pinfo "Skipping indexing, using cached $REF_DB files"
else
    rm -f $REF_DB.done
    rm -rf $REF_DB
    pinfo "RUNNING: $INDEX_CMD $INDEX_PARAMS $REF_FILE $REF_DB"
    $INDEX_CMD $INDEX_PARAMS $REF_FILE $REF_DB
    pinfo "Indexing $REF_FILE...done."
    pinfo "Created $REF_DB* files."
    touch $REF_DB.done
fi

pinfo "Searching for matches..."
#
pinfo "Running: $QUERY_CMD $QUERY_PARAMS"
$QUERY_CMD $QUERY_PARAMS    > $OUT_FILE.tmp
# bowte1: no gaps
pinfo "Processing alignments..."
echo "query|ref|nmismatches|ngaps" | tr "|" "\t" > $OUT_FILE.tmp2
if [ $bowtie_version == 1 ]; then
    cat $OUT_FILE.tmp | grep "NM:" | cut -f 1,3-|sed -E "s/([^\t]+)\t([^\t]+)\t.*NM:i:([0-9]+).*/\1\t\2\t\3\t0/" > $OUT_FILE.tmp2
else
    cat $OUT_FILE.tmp | grep "XM:" | cut -f 1,3-|sed -E "s/([^\t]+)\t([^\t]+)\t.*XM:i:([0-9]+)\t.*XO:i:([0-9]+).*/\1\t\2\t\3\t\4/" | awk 'BEGIN{FS="\t";OFS="\t";} $3<4 { print;} '> $OUT_FILE.tmp2
fi
mv $OUT_FILE.tmp2 $OUT_FILE
rm -f $OUT_FILE.tmp
pinfo "All done."
exit 0
## XO:i:<N> The number of gap opens, for both read and reference gaps, in the alignment.
## XG:i:<N> The number of gap extensions, for both read and reference gaps, in the alignment. 


