#grouping taxa. this should be a dataframe with the taxon to group in column 1 and taxon to group to in column 2. Done last.
#Can be made separately,e.g. in excel, this is just example. Ensure the order is correct. put taxa.to.group=NULL to skip this
taxa.to.group<-data.table::fread("/media/sf_Documents/WORK/CIBIO/AA_PROJECTS/FILTURB/SARA_MSc/stats/AFTER_THESIS_SUBMISSION/For_South_MS/new.groupings_Feb2020.txt"
,data.table = F,sep = "\t",header = F,col.names = c("taxa.to.group","group.to"))
#################
#PLOTTING
#variables to use as groups for plots, set to NULL to skip making
plotting.vars<-c("Site") #these will be the x-axes, for each plotting.var a different plot is made
#the taxonomic levels to use for plotting. Set to NULL to use the taxatable as is (which will be printed regardless)
#for each plotting_level a different plot is made
plotting_levels<-c("species")
#hide legend (for barplots, to avoid cowplot errors set to FALSE)
hidelegend=T
#hide legend for pca plots
hidelegend.pca=T
#split plots by facet, set to NULL if not required, usually for "below" plotting.vars (not implemeted for pca plots yet)
facetcol=NULL
#add a colour bar to heatmap plots (only makes sense if "above" plotting.vars). can be NULL
colour.bar=c("Exact Site")
#make krona plot of final taxatab, put to F if not desired
krona.out<-F
plot.bars=F
plot.pca=F
show.pca.lines=F
plot.heatmaps=T
#knit
rmarkdown::render(input = paste0(bastoolsDir,"scripts/TAXATABLE_REPORT.Rmd"),output_file = out_html)
#taxatable filtering and report config
#usually will be for one primer/run, but if all settings can be applied globally then multiple tables can be provided
#It is intended that this is an iterative process. Run the inital script (examplez/example_initial_trial_POST_REBIN_SCRIPT_congif.R)
#with no filters, inspect, change settings, run again, repeat.
#############################################################################
#FILES
#change setting below as necessary
bastoolsDir<-"/home/tutorial/TOOLS/bastools/" #change to your bastools directory
#can be multiple...
taxatabs<-c("/media/sf_Documents/WORK/CIBIO/AA_PROJECTS/FILTURB/SARA_MSc/stats/AFTER_THESIS_SUBMISSION/For_South_MS/FILTURB-2018_07_12S.taxatable.tf.spliced.txt")
# get master sheet first separately (better than including in pipe)
# source(paste0(bastoolsDir,"master_functions.R"))
# mastersheet<-google.overlord("https://docs.google.com/spreadsheets/d/1k1mAGogWq9rXcwBKDyxG9oZ0OrWreBRRcSEUw0RGwyk/edit?ts=5d776492#gid=1377121809")
# write.table(mastersheet,"MUSSELS_mastersheet.txt",append = F,quote = F,row.names = F,sep = "\t")
#path to pre-downloaded master sheet. Set to NULL if downloading from google. Tab - separated
master_sheet_file="/media/sf_Documents/WORK/CIBIO/AA_PROJECTS/FILTURB/SARA_MSc/stats/AFTER_THESIS_SUBMISSION/For_South_MS/mastersheet.txt"
#options for subsetting master sheet. This functions to sleect the samples you want to analyse.
#Each item in list is a column heading in master sheet and each character within the item should be what you want to include
#(sample_type should always be lower case, even if it is not so on google)
subsetlist<-list(experiment_id="2018_07",primer_set="12SV5.2",study="South",sample_type=c("PCR_negative", "Field_Negative","Field"))
#full path to this config file.
config="/media/sf_Documents/WORK/CIBIO/AA_PROJECTS/FILTURB/SARA_MSc/stats/AFTER_THESIS_SUBMISSION/For_South_MS/taxatable.report.12SV2.config.R"
#where do you want to save output? full path to target out html
out_html<-"/media/sf_Documents/WORK/CIBIO/AA_PROJECTS/FILTURB/SARA_MSc/stats/AFTER_THESIS_SUBMISSION/For_South_MS/taxatable.report.12SV2.html"
#full path to output the final taxatab, put to NULL if not desired
taxatab.out<-"/media/sf_Documents/WORK/CIBIO/AA_PROJECTS/FILTURB/SARA_MSc/stats/AFTER_THESIS_SUBMISSION/For_South_MS/final.taxatab.12SV2.tsv"
#################
#FILTERS
#problem taxa - specific taxa in high reads that are not targets, usually human or predator. This is a grep, so
#form the taxa path accordingly and make sure you are only removing what you want (by checking output).
#use problemTaxa<-c("NothingToAdd") to turn this off
problemTaxa<-c("NothingToAdd")
#Detection below taxonpc % of taxon read count will be removed (0.1=0.1%)
taxonpc = 0
#Detection below samplepc % of sample read count will be removed (0.1=0.1%)
samplepc=0
#the absolute value for removing detections in pcr reps (maybe not necessary here, wait til after sumreps...?, as we consider anything in 2 reps to be true)
filter_dxn = 0
#the absolute value for removing detections after summing replicate level (not sure of level, could leave very low, as we consider anything in 2 reps to be true)
filter_dxn2 = 0
#sample_type used to describe your real samples (not negatives)
real = c("Field")
#negative types (as detailed in master sheet) and groups to which each one belongs (must be same order). Put neg.types=NULL and neg.groups=NULL
#if no negtaives, or skipping this
neg.types=c("PCR_negative", "Field_Negative")
neg.groups=c("Sample_Plate","Site")
#Do first inspection of negatives prior to applying filters, useful, but long output if lots of negatives with reads
do.first.negative.inspection=F
#use.contamination.filter function?
use.contamination.filter=F
#remove contaminants, not just from batches/groups, but from the entire data set?
remove.entire.dataset=F
#only remove detections of a taxon if they are less than the number of reads for that taxon in the negative
rm.only.less.than=T
#grouping for removing detections in <1 rep
rep.rm<-"biomaterial"
#removing detections in <1 rep prior to rm.contaminants?
rep.rm.first<-F
#removing detections in <1 rep post rm.contaminants?
rep.rm.second<-T
#collapse all taxa at this level.  Put xLevel=NULL to skip this
xLevel<-NULL
#Keep only taxa at/below this level:
zLevel<-"species"
#collapse taxa pre-grouping?
aggregate.pre.grouping=F
#group taxa before filtering?
group.taxa.before.filtering=T
#sum reps by
sumrepsby<-"ss_sample_id"
#unwanted taxa - non-targets that are not required for final analysis. This is applied last. This is a grep, so
#form the taxa path accordingly and make sure you are only removing what you want (by checking output).
#use problemTaxa<-c("NothingToAdd") to not use this
unwantedTaxa<-c("NothingToAdd")
#grouping taxa. this should be a dataframe with the taxon to group in column 1 and taxon to group to in column 2. Done last.
#Can be made separately,e.g. in excel, this is just example. Ensure the order is correct. put taxa.to.group=NULL to skip this
taxa.to.group<-data.table::fread("/media/sf_Documents/WORK/CIBIO/AA_PROJECTS/FILTURB/SARA_MSc/stats/AFTER_THESIS_SUBMISSION/For_South_MS/new.groupings_Feb2020.txt"
,data.table = F,sep = "\t",header = F,col.names = c("taxa.to.group","group.to"))
#################
#PLOTTING
#variables to use as groups for plots, set to NULL to skip making
plotting.vars<-c("Site") #these will be the x-axes, for each plotting.var a different plot is made
#the taxonomic levels to use for plotting. Set to NULL to use the taxatable as is (which will be printed regardless)
#for each plotting_level a different plot is made
plotting_levels<-c("species")
#hide legend (for barplots, to avoid cowplot errors set to FALSE)
hidelegend=T
#hide legend for pca plots
hidelegend.pca=T
#split plots by facet, set to NULL if not required, usually for "below" plotting.vars (not implemeted for pca plots yet)
facetcol=NULL
#add a colour bar to heatmap plots (only makes sense if "above" plotting.vars). can be NULL
colour.bar=c("Exact Site")
#make krona plot of final taxatab, put to F if not desired
krona.out<-F
plot.bars=F
plot.pca=F
show.pca.lines=F
plot.heatmaps=T
#knit
rmarkdown::render(input = paste0(bastoolsDir,"scripts/TAXATABLE_REPORT.Rmd"),output_file = out_html)
#taxatable filtering and report config
#usually will be for one primer/run, but if all settings can be applied globally then multiple tables can be provided
#It is intended that this is an iterative process. Run the inital script (examplez/example_initial_trial_POST_REBIN_SCRIPT_congif.R)
#with no filters, inspect, change settings, run again, repeat.
#############################################################################
#FILES
#change setting below as necessary
bastoolsDir<-"/home/tutorial/TOOLS/bastools/" #change to your bastools directory
#can be multiple...
taxatabs<-c("/media/sf_Documents/WORK/CIBIO/AA_PROJECTS/FILTURB/SARA_MSc/stats/AFTER_THESIS_SUBMISSION/For_South_MS/FILTURB-2018_07_12S.taxatable.tf.spliced.txt")
# get master sheet first separately (better than including in pipe)
# source(paste0(bastoolsDir,"master_functions.R"))
# mastersheet<-google.overlord("https://docs.google.com/spreadsheets/d/1k1mAGogWq9rXcwBKDyxG9oZ0OrWreBRRcSEUw0RGwyk/edit?ts=5d776492#gid=1377121809")
# write.table(mastersheet,"MUSSELS_mastersheet.txt",append = F,quote = F,row.names = F,sep = "\t")
#path to pre-downloaded master sheet. Set to NULL if downloading from google. Tab - separated
master_sheet_file="/media/sf_Documents/WORK/CIBIO/AA_PROJECTS/FILTURB/SARA_MSc/stats/AFTER_THESIS_SUBMISSION/For_South_MS/mastersheet.txt"
#options for subsetting master sheet. This functions to sleect the samples you want to analyse.
#Each item in list is a column heading in master sheet and each character within the item should be what you want to include
#(sample_type should always be lower case, even if it is not so on google)
subsetlist<-list(experiment_id="2018_07",primer_set="12SV5.2",study="South",sample_type=c("PCR_negative", "Field_Negative","Field"))
#full path to this config file.
config="/media/sf_Documents/WORK/CIBIO/AA_PROJECTS/FILTURB/SARA_MSc/stats/AFTER_THESIS_SUBMISSION/For_South_MS/taxatable.report.12SV2.config.R"
#where do you want to save output? full path to target out html
out_html<-"/media/sf_Documents/WORK/CIBIO/AA_PROJECTS/FILTURB/SARA_MSc/stats/AFTER_THESIS_SUBMISSION/For_South_MS/taxatable.report.12SV2.html"
#full path to output the final taxatab, put to NULL if not desired
taxatab.out<-"/media/sf_Documents/WORK/CIBIO/AA_PROJECTS/FILTURB/SARA_MSc/stats/AFTER_THESIS_SUBMISSION/For_South_MS/final.taxatab.12SV2.tsv"
#################
#FILTERS
#problem taxa - specific taxa in high reads that are not targets, usually human or predator. This is a grep, so
#form the taxa path accordingly and make sure you are only removing what you want (by checking output).
#use problemTaxa<-c("NothingToAdd") to turn this off
problemTaxa<-c("NothingToAdd")
#Detection below taxonpc % of taxon read count will be removed (0.1=0.1%)
taxonpc = 0.1
#Detection below samplepc % of sample read count will be removed (0.1=0.1%)
samplepc=0.1
#the absolute value for removing detections in pcr reps (maybe not necessary here, wait til after sumreps...?, as we consider anything in 2 reps to be true)
filter_dxn = 0
#the absolute value for removing detections after summing replicate level (not sure of level, could leave very low, as we consider anything in 2 reps to be true)
filter_dxn2 = 0
#sample_type used to describe your real samples (not negatives)
real = c("Field")
#negative types (as detailed in master sheet) and groups to which each one belongs (must be same order). Put neg.types=NULL and neg.groups=NULL
#if no negtaives, or skipping this
neg.types=c("PCR_negative", "Field_Negative")
neg.groups=c("Sample_Plate","Site")
#Do first inspection of negatives prior to applying filters, useful, but long output if lots of negatives with reads
do.first.negative.inspection=F
#use.contamination.filter function?
use.contamination.filter=F
#remove contaminants, not just from batches/groups, but from the entire data set?
remove.entire.dataset=F
#only remove detections of a taxon if they are less than the number of reads for that taxon in the negative
rm.only.less.than=T
#grouping for removing detections in <1 rep
rep.rm<-"biomaterial"
#removing detections in <1 rep prior to rm.contaminants?
rep.rm.first<-F
#removing detections in <1 rep post rm.contaminants?
rep.rm.second<-T
#collapse all taxa at this level.  Put xLevel=NULL to skip this
xLevel<-NULL
#Keep only taxa at/below this level:
zLevel<-"species"
#collapse taxa pre-grouping?
aggregate.pre.grouping=F
#group taxa before filtering?
group.taxa.before.filtering=T
#sum reps by
sumrepsby<-"ss_sample_id"
#unwanted taxa - non-targets that are not required for final analysis. This is applied last. This is a grep, so
#form the taxa path accordingly and make sure you are only removing what you want (by checking output).
#use problemTaxa<-c("NothingToAdd") to not use this
unwantedTaxa<-c("NothingToAdd")
#grouping taxa. this should be a dataframe with the taxon to group in column 1 and taxon to group to in column 2. Done last.
#Can be made separately,e.g. in excel, this is just example. Ensure the order is correct. put taxa.to.group=NULL to skip this
taxa.to.group<-data.table::fread("/media/sf_Documents/WORK/CIBIO/AA_PROJECTS/FILTURB/SARA_MSc/stats/AFTER_THESIS_SUBMISSION/For_South_MS/new.groupings_Feb2020.txt"
,data.table = F,sep = "\t",header = F,col.names = c("taxa.to.group","group.to"))
#################
#PLOTTING
#variables to use as groups for plots, set to NULL to skip making
plotting.vars<-c("Site") #these will be the x-axes, for each plotting.var a different plot is made
#the taxonomic levels to use for plotting. Set to NULL to use the taxatable as is (which will be printed regardless)
#for each plotting_level a different plot is made
plotting_levels<-c("species")
#hide legend (for barplots, to avoid cowplot errors set to FALSE)
hidelegend=T
#hide legend for pca plots
hidelegend.pca=T
#split plots by facet, set to NULL if not required, usually for "below" plotting.vars (not implemeted for pca plots yet)
facetcol=NULL
#add a colour bar to heatmap plots (only makes sense if "above" plotting.vars). can be NULL
colour.bar=c("Exact Site")
#make krona plot of final taxatab, put to F if not desired
krona.out<-F
plot.bars=F
plot.pca=F
show.pca.lines=F
plot.heatmaps=T
#knit
rmarkdown::render(input = paste0(bastoolsDir,"scripts/TAXATABLE_REPORT.Rmd"),output_file = out_html)
source("/home/tutorial/TOOLS/bastools/master_functions.R")
db<-phylotools::read.fasta("/media/sf_Documents/WORK/CIBIO/AA_PROJECTS/IRANVERTS/SHEEP/sheepDB_23_06_20/sheepDB_23_06_20.fasta")
fastadb<-"/media/sf_Documents/WORK/CIBIO/AA_PROJECTS/IRANVERTS/SHEEP/sheepDB_23_06_20/sheepDB_23_06_20.fasta"
db<-phylotools::read.fasta(fastadb)
dbout<-"/home/tutorial/TOOLS/DBS/sheepDB_23_06_20" #has to be on virtual machine for makeblastdb
#generated blastdb
system2("metabinkit_blastgendb",c("-f",fastadb,"-o",dbout),wait = T)
sangerdb<-"/media/sf_Documents/WORK/CIBIO/AA_PROJECTS/IRANVERTS/SHEEP/sheepDB_23_06_20/this_study_sanger.fasta"
fulldb<-"/media/sf_Documents/WORK/CIBIO/AA_PROJECTS/IRANVERTS/SHEEP/sheepDB_23_06_20/fulldb.fasta"
#generated blastdb
system2("cat",c(fastadb,sangerdb),wait = T,stdout = fulldb)
system2("metabinkit_blastgendb",c("-f",fulldb,"-o",dbout),wait = T)
dbout<-"/home/tutorial/TOOLS/DBS/fulldb" #has to be on virtual machine for makeblastdb
system2("metabinkit_blastgendb",c("-f",fulldb,"-o",dbout),wait = T)
fastaquery<-"/media/sf_Documents/WORK/CIBIO/AA_PROJECTS/IRANVERTS/SHEEP/none.flash2.vsearch_qfilt.cutadapt.vsearch_uniq.no_afilt.allsamples_step5.ALL_vsearch_uniq.nodenoise.noclust.fasta"
blastres<-"/media/sf_Documents/WORK/CIBIO/AA_PROJECTS/IRANVERTS/SHEEP/none.flash2.vsearch_qfilt.cutadapt.vsearch_uniq.no_afilt.allsamples_step5.ALL_vsearch_uniq.nodenoise.noclust.blast.tsv"
#blast reads
system2("metabinkit_blast",c("-f", fastaquery, "-D", dbout, "-o", blastres,"-O",
'6 qseqid evalue pident qcovs qlen saccver staxids ssciname sseqid sseq',
"-w", 11, "-t", 8, "-q", 30, "-r", 1, "-p", -1, "-M", 50),wait = T)
#running metabin in R
dir2script<-"/home/tutorial/TOOLS/metabinkit.install/exe"
#run this chunk
mbk.local.lib.path <- paste0(dir2script,"/../R")
source(paste0(dir2script,"/../R/metabinkit.R"))
default.taxonkit.db.dir <- paste0(dir2script,"/../db/")
library(optparse)
############################################################
option_list = list(
make_option(c("-i", "--input"), type="character", default=NULL,
help="TSV file name", metavar="filename"),
make_option(c("-o", "--out"), type="character", default=NULL,
help="output file prefix ", metavar="filename"),
# TODO: v2
#    make_option(c("-s", "--subspecies"), type="double", default=99.5,
#                help="subspecies %id threshold [default= %default]", metavar="double"),
make_option(c("-S", "--Species"), type="double", default=99.0,
help="species %id threshold [default= %default]", metavar="double"),
make_option(c("-G", "--Genus"), type="double", default=97.0,
help="genus %id threshold [default= %default]", metavar="double"),
make_option(c("-F", "--Family"), type="double", default=95.0,
help="family %id threshold [default= %default]", metavar="double"),
make_option(c("-A", "--AboveF"), type="double", default=90.0,
help="above family %id threshold [default= %default]", metavar="double"),
make_option(c("-D", "--db"), type="character", default=default.taxonkit.db.dir,
help="directory containing the taxonomy db (nodes.dmp and names.dmp) [default= %default]", metavar="double"),
make_option(c("--SpeciesNegFilter"), type="character", default=NULL,
help="negative filter (file with one word per line) [default= %default]", metavar="filename"),
make_option(c("--SpeciesBL"), type="character", default=NULL,
help="species blacklist (file with one taxid per line) [default= %default]", metavar="filename"),
make_option(c("--GenusBL"), type="character", default=NULL,
help="genera blacklist (file with one taxid per line) [default= %default]", metavar="filename"),
make_option(c("--FamilyBL"), type="character", default=NULL,
help="families blacklist (file with one taxid per line) [default= %default]", metavar="filename"),
make_option(c("--FilterFile"), type="character", default=NULL,
help="file name with the entries from the input to exclude (on entry per line)  [default= %default]", metavar="filename"),
make_option(c("--FilterCol"), type="character", default="sseqid",
help="Column name to look for the values found the the file provided in the --Filter parameter  [default= %default]", metavar="filename"),
## tops,tpoS,topG,topF,topAbs
make_option(c("--TopSpecies"), type="integer", default=100,
help="TODO [default= %default]", metavar="integer"),
make_option(c("--TopGenus"), type="integer", default=100,
help="TODO [default= %default]", metavar="integer"),
make_option(c("--TopFamily"), type="integer", default=100,
help="TODO [default= %default]", metavar="integer"),
make_option(c("--TopAF"), type="integer", default=100,
help="TODO above family? [default= %default]", metavar="integer"),
make_option(c("-v","--version"), action = "store_true", default = FALSE,
help = "print version and exit"),
make_option(c("--no_mbk"), action = "store_true", default = FALSE,
help = "Do not use mbk: codes in the output file to explain why a sequence was not binned at a given level (NA is used throughout)"),
## discard sp
make_option(c("--sp_discard_sp"), action = "store_true", default = FALSE,
help = "Discard species with sp. in the name"),
make_option(c("--sp_discard_mt2w"), action = "store_true", default = FALSE,
help = "Discard species with more than two words"),
make_option(c("--sp_discard_num"), action = "store_true", default = FALSE,
help = "Discard species with numbers"),
make_option(c("-M","--minimal_cols"), action = "store_true", default = FALSE, help = "Include only the seqid and lineage information in the output table [%default]")
##make_option(c("-O", "--Order"), type="double", default=75.0,
##            help="Order %id threshold [default= %default]", metavar="double"),
##make_option(c("-C", "--Class"), type="double", default=65.0,
##            help="Class %id threshold [default= %default]", metavar="double")
);
opt_parser = OptionParser(option_list=option_list);
opt = parse_args(opt_parser);
if ( opt$version ) {
print.version()
quit(status=0)
}
#change opt to desired settings (only change/run the ones required)
opt$input<-"/media/sf_Documents/WORK/CIBIO/AA_PROJECTS/IRANVERTS/SHEEP/none.flash2.vsearch_qfilt.cutadapt.vsearch_uniq.no_afilt.allsamples_step5.ALL_vsearch_uniq.nodenoise.noclust.blast.filt.tsv"
opt$out<-"/media/sf_Documents/WORK/CIBIO/AA_PROJECTS/IRANVERTS/SHEEP/none.flash2.vsearch_qfilt.cutadapt.vsearch_uniq.no_afilt.allsamples_step5.ALL_vsearch_uniq.nodenoise.noclust.bins.tsv"
opt$SpeciesBL
opt$GenusBL
opt$FamilyBL
opt$SpeciesNegFilter
opt$FilterCol
opt$Species
opt$Genus
opt$Family
opt$AboveF
opt$TopSpecies
opt$TopGenus
opt$TopFamily
opt$TopAF
opt$no_mbk
opt$sp_discard_sp
opt$sp_discard_mt2w
opt$sp_discard_num
if (is.null(opt$input)){
print_help(opt_parser)
stop("--input parameter should be provided.\n", call.=FALSE)
}
print.version()
## Blacklisting
##
species.blacklist <- NULL
genus.blacklist <- NULL
family.blacklist <- NULL
species.neg <- NULL
only_taxids <- function(v,file) {
if (sum(!is.integer(v))>0) {
perror(fatal=TRUE,"blacklist file ",file," should only contain integers (taxids) in the first column")
}
}
## load blacklists
if (!is.null(opt$SpeciesBL)) {
if (!file.exists(opt$SpeciesBL) ) perror(fatal=TRUE,"file ",opt$SpeciesBL, " not found")
species.blacklist <- as.vector(read.table(file=opt$SpeciesBL,header=F,comment.char = "#",sep="\t",quote="")$V1)
only_taxids(species.blacklist,f=opt$SpeciesBL)
}
if (!is.null(opt$GenusBL)) {
if (!file.exists(opt$GenusBL) ) perror(fatal=TRUE,"file ",opt$GenusBL, " not found")
genus.blacklist <- as.vector(read.table(file=opt$GenusBL,header=F,comment.char = "#",sep="\t",quote="")$V1)
only_taxids(genus.blacklist,f=opt$GenusBL)
}
if (!is.null(opt$FamilyBL)) {
if (!file.exists(opt$FamilyBL) ) perror(fatal=TRUE,"file ",opt$FamilyBL, " not found")
family.blacklist <- as.vector(read.table(file=opt$FamilyBL,header=F,comment.char = "#",sep="\t",quote="")$V1)
only_taxids(family.blacklist,f=opt$FamilyBL)
}
if (!is.null(opt$SpeciesNegFilter)) {
if (!file.exists(opt$SpeciesNegFilter) ) perror(fatal=TRUE,"file ",opt$SpeciesNegFilter, " not found")
species.neg <- as.vector(read.table(file=opt$SpeciesNegFilter,header=F,comment.char = "#",sep="\t",quote="")$V1)
}
if(is.null(opt$FilterCol) && !is.null(opt$FilterFile)) {
stop("--FilterFile needs to be provided with --FilterCol")
}
##
filter.list <- NULL
if (!is.null(opt$FilterFile)) {
print(file.exists(opt$FilterFile))
if (!file.exists(opt$FilterFile) ) perror(fatal=TRUE,"file ",opt$FilterFile, " not found!!!")
filter.list <- as.vector(read.table(file=opt$FilterFile,header=F,comment.char = "#",sep="\t",quote=""))
if (length(filter.list)==0) { filter.list <- NULL }
}
pinfo("Starting Binning")
t1<-Sys.time()
#here assigning all opts to metabin args
ifile=opt$input
taxDir=opt$db
spident=opt$Species
gpident=opt$Genus
fpident=opt$Family
abspident=opt$AboveF
topS=opt$TopSpecies
topF=opt$TopFamily
topG=opt$TopGenus
topAbs=opt$TopAF
species.blacklist=species.blacklist
genus.blacklist=genus.blacklist
family.blacklist=family.blacklist
filter.col=opt$FilterCol
filter=filter.list
species.neg=species.neg
no_mbk=opt$no_mbk
sp.consider.mt2w=!opt$sp_discard_mt2w
sp.consider.numbers=!opt$sp_discard_num
sp.consider.sp=!opt$sp_discard_sp
quiet=FALSE
####################
## validate arguments
if(is.null(taxDir)) perror(fatal=TRUE,"taxDir not specified");
ifile<-"/media/sf_Documents/WORK/CIBIO/AA_PROJECTS/IRANVERTS/SHEEP/intestwithNAs.tsv"
if(!file.exists(ifile)) perror(fatal=TRUE,"file ", ifile, "not found");
## all arguments look ok, carry on...
library(data.table)
options(datatable.fread.input.cmd.message=FALSE)
topS <- set_within_limit(topS,0,100)
topG <- set_within_limit(topG,0,100)
topF <- set_within_limit(topF,0,100)
topAbs <- set_within_limit(topAbs,0,100)
## start timer
t1<-Sys.time()
## would prefer that file was loader prior to this function being called
## lets keep it for now
btab.o<-data.table::fread(ifile,sep="\t",data.table = F)
pinfo(verbose=!quiet,"Read ",nrow(btab.o)," entries from ",ifile)
#if ( nrow(btab.o) == 0 ) {
#    perror(fatal=TRUE,"Unable to proceed - no data")
#}
## are the expected columns present?
## accept staxids instead of taxids
if ( "staxids"%in%colnames(btab.o) && !"taxids"%in%colnames(btab.o)) {
pinfo("taxids column not found, using staxids instead")
btab.o$taxids <- btab.o$staxids
} else {
if ( "staxid"%in%colnames(btab.o) && !"taxids"%in%colnames(btab.o)) {
pinfo("taxids column not found, using staxid instead")
btab.o$taxids <- btab.o$staxid
}
}
## qseqid pident taxids
expected.cols <- c("qseqid","pident","taxids")
if(!is.null(filter.col) && !is.null(filter)) {
expected.cols <- c(expected.cols,filter.col)
}
not.found <- expected.cols[!expected.cols%in%colnames(btab.o)]
if ( length(not.found) > 0 ) perror(fatal=TRUE,"missing columns in input table:",paste(not.found,collapse=","))
## Filter
if(!is.null(filter.col) && !is.null(filter)) {
pinfo("Filtering table (",nrow(btab.o),") using ",filter.col," column.")
btab.o <- btab.o[!btab.o[,filter.col]%in%filter,,drop=FALSE]
pinfo("Filtered table (",nrow(btab.o),") using ",filter.col," column.")
}
## check if lineage information is available
expected.tax.cols <- c("K","P","C","O","F","G","S")
not.found <- expected.tax.cols[!expected.tax.cols%in%colnames(btab.o)]
if ( length(not.found) > 0 ) {
message(" WARNING! missing columns in input table with taxonomic information:",paste(not.found,collapse=","))
pinfo(" Trying to get taxonomic information from the database in ",taxDir," ...")
##
btab.o <- add.lineage.df(btab.o,taxDir=taxDir,taxCol="taxids")
pinfo(" taxonomic information retrieval complete.")
## Double check that all cols are present
not.found <- expected.tax.cols[!expected.tax.cols%in%colnames(btab.o)]
if ( length(not.found) > 0 ) {
perror(fatal=TRUE," Missing columns in input table with taxonomic information:",paste(not.found,collapse=","))
}
## Missing taxids
num.tnf.sp <- sum(btab.o$S=="mbk:tnf")
num.tnf.g <- sum(btab.o$G=="mbk:tnf")
num.tnf.f <- sum(btab.o$F=="mbk:tnf")
if ( num.tnf.sp >0 || num.tnf.g>0 || num.tnf.g >0 ) {
message("WARNING: Some taxids were not found in the taxonomy database, consider checking if they are correct and/or updating the taxonomy database. All taxids not found (tnf) are marked in the final table as mbk:tnf.")
}
}
## check NAs in taxonomy. Should only be an issue if user provided custom taxonomy
## This can happen when the blast database and taxonomy mapping file are merged, but have differences in qseqids/saccvers
countNAs<-sum(is.na(btab.o[,expected.tax.cols]))
if(countNAs>0) {
perror(countNAs," NAs found in taxonomy columns. Converting NAs to 'unknown', please check input taxonomy.")
btab.o[,expected.tax.cols][is.na(btab.o[,expected.tax.cols])]<-"unknown"
}
## check NAs in taxonomy. Should only be an issue if user provided custom taxonomy
## This can happen when the blast database and taxonomy mapping file are merged, but have differences in qseqids/saccvers
countNAs<-sum(is.na(btab.o[,expected.tax.cols]))
head(btab.o$K)
outDir<-"/home/tutorial/TOOLS/bastools/beta/PB_classifier/"
input<-"2019_August_002.VENE.lenFilt.trimmed.ids.SC4.pol.blast.txt" #example
bastoolsDir<-"/home/tutorial/TOOLS/bastools/" #needed only for add.lineage.df
ncbiTaxDir<-"/home/tutorial/TOOLS/metabinkit.install/exe/../db/"
TaxlevelTest=c("S","G","F")
source(paste0(bastoolsDir,"master_functions.R"))
library(ggplot2)
library(tidyverse)
setwd(outDir)
#######################################################
#makeblastdb
#read full blast results
fullblast<-data.table::fread(input,data.table = F)
#remove hyphens sseq
fullblast$sseq<-gsub("-","",fullblast$sseq)
length(unique(fullblast$saccver))
length(unique(fullblast$sseq))
colnames(fullblast)
length(unique(fullblast$staxid))
#length(unique(fullblast$sseq))
#select only unique saccver, to reduce db size...could actually just do unique sseqs, and then merge later
#add lineages for loop blasting later
fullblast<-add.lineage.df(fullblast,ncbiTaxDir,taxCol = "staxid")
length(unique(fullblast$S))
