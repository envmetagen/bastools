{
    "collab_server" : "",
    "contents" : "#' @include taxonomy.R\nNULL\n\n#' @export\nsetGeneric(\"rank.list\", function(taxonomy) {\n  return(standardGeneric(\"rank.list\"))\n})\n\n#' Returns the list of taxonomic ranks\n#' \n#' The \\code{rank.list} function returns the list of all taxonomic\n#' ranks described in the taxonomy\n#' \n#' @param   taxonomy a \\code{\\linkS4class{obitools.taxonomy}} instance\n#' \n#' @return a vector of type \\code{character} containing the taxonomic rank names\n#'  \n#' @examples\n#' # read the taxonomy database\n#' taxo=default.taxonomy()\n#' \n#' # returns the taxonomic rank for all taxid between 1000 and 1020\n#' rank.list(taxo)\n#' \n#' @docType methods\n#' @rdname rank.list-methods\n#' @aliases rank.list-methods,obitools.taxonomy\n#' @author Eric Coissac\n#' @keywords taxonomy\n#' \nsetMethod(\"rank.list\", \"obitools.taxonomy\",\n          function(taxonomy) {\n            return(.Call('R_rank_list',\n                         taxonomy,\n                         PACKAGE=\"ROBITaxonomy\"))\n          })\n\n\n#' @export\nsetGeneric(\"taxonomicrank\", function(taxonomy,taxid) {\n  return(standardGeneric(\"taxonomicrank\"))\n})\n\n#' Returns the taxonomic rank associated to a taxid\n#' \n#' @param   taxonomy a \\code{\\linkS4class{obitools.taxonomy}} instance\n#' @param   taxid a vector of taxid to analyse\n#'\n#' @return a vector of type \\code{character} containing the taxonomic ranks\n#'  \n#' @examples\n#' # read the taxonomy database\n#' taxo=default.taxonomy()\n#' \n#' # returns the taxonomic rank for all taxid between 1000 and 1020\n#' taxonomicrank(taxo,1000:1020)\n#' \n#' @docType methods\n#' @rdname taxonomicrank-methods\n#' @aliases taxonomicrank-methods,obitools.taxonomy\n#' @author Eric Coissac\n#' @keywords taxonomy\n#' \nsetMethod(\"taxonomicrank\", \"obitools.taxonomy\",function(taxonomy,taxid) {  \n  taxid = as.integer(taxid)\n  return(.Call('R_get_rank',\n               taxonomy,\n               taxid,\n               PACKAGE=\"ROBITaxonomy\"))\n})\n\n#' @export\nsetGeneric(\"taxonatrank\", function(taxonomy,taxid,rank,name=FALSE) {\n  return(standardGeneric(\"taxonatrank\"))\n})\n\n#' Extracts the taxid at a specified taxonomic rank.\n#' \n#' The \\code{taxonatrank} method of \\code{\\linkS4class{obitools.taxonomy}} class\n#' returns the \\emph{taxid} or the scientific name corresponding \n#' to a \\emph{taxid}.at a specified taxonomic rank\n#' \n#' @param   taxonomy a \\code{\\linkS4class{obitools.taxonomy}} instance\n#' @param   taxid a vector of taxid to analyse\n#' @param   rank a \\code{character} indicating the desired rank\n#' @param   name  A logical value \\code{TRUE} or \\code{FALSE} indicating \n#'          if the method return a taxid or a scientific name.\n#'          \n#' @return  \\describe{\n#'   \\item{If \\code{name==FALSE}}{the taxid of the corresponding \n#'                                taxon as an integer or a vector of integers \n#'                                if the \\code{taxid} argument is itself \n#'                                a vector}\n#'   \\item{If \\code{name==TRUE}}{the scientific name of the corresponding \n#'                               taxon as a string or a vector of string \n#'                               if the \\code{taxid} argument is itself \n#'                               a vector}\n#'  }\n#'  \n#' @examples\n#' # read the taxonomy database\n#' taxo=default.taxonomy()\n#' \n#' # build a vector of 6 taxids corresponding to species\n#' sp.taxid=c(7000,7004,7007,7009,7010,7011)\n#' \n#' # look for the subfamily taxids\n#' taxonatrank(taxo,sp.taxid,\"subfamily\")\n#' \n#' # same thing but returns results as a vector of scientific names\n#' taxonatrank(taxo,sp.taxid,\"subfamily\",TRUE)\n#' \n#' @seealso class \\code{\\linkS4class{obitools.taxonomy}},\n#' and methods \\code{\\link{species}},\\code{\\link{genus}},\n#' \\code{\\link{family}},\\code{\\link{kingdom}},\n#' \\code{\\link{superkingdom}}\n#' \n#' @docType methods\n#' @rdname taxonatrank-methods\n#' @aliases taxonatrank-methods,obitools.taxonomy\n#' @author Eric Coissac\n#' @keywords taxonomy\n#' \nsetMethod(\"taxonatrank\", \"obitools.taxonomy\",function(taxonomy,taxid,rank,name=FALSE) {\n  getsp = function(t)   {\t\n    if (is.na(t[1]) | is.na(t[2]))\n      return(NA)\n    else\n      return(.Call('R_findtaxonatrank',taxonomy,\n                   as.integer(t[1]),\n                   t[2],\n                   name,\n                   PACKAGE=\"ROBITaxonomy\"))\n  }\n  \n  rank  = as.character(rank)\n  name  = as.logical(name[1])\n  \n  apply(data.frame(taxid,rank),1,getsp)\n})\n\n\n#' @export\nsetGeneric(\"species\", function(taxonomy,taxid,name=FALSE) {\n  return(standardGeneric(\"species\"))\n})\n\n#' Extracts the species corresponding to a taxid\n#' \n#' The \\code{species} method of \\code{\\linkS4class{obitools.taxonomy}} class\n#' returns the \\emph{taxid} or the scientific name of the species corresponding \n#' to a \\emph{taxid}.\n#' \n#' @param   taxonomy a \\code{\\linkS4class{obitools.taxonomy}} instance\n#' @param   taxid a vector of taxid to analyse\n#' @param   name  A logical value \\code{TRUE} or \\code{FALSE} indicating \n#'          if the method return a taxid or a scientific name.\n#'          \n#' @return  \\describe{\n#'   \\item{If \\code{name==FALSE}}{the taxid of the corresponding \n#'                                taxon as an integer or a vector of integers \n#'                                if the \\code{taxid} argument is itself \n#'                                a vector}\n#'   \\item{If \\code{name==TRUE}}{the scientific name of the corresponding \n#'                               taxon as a string or a vector of string \n#'                               if the \\code{taxid} argument is itself \n#'                               a vector}\n#'  }\n#'  \n#' @examples\n#' # read the taxonomy database\n#' taxo=default.taxonomy()\n#' \n#' # build a vector of 6 taxids corresponding to species\n#' sp.taxid=c(7000,7004,7007,7009,7010,7011)\n#' \n#' # look for the species taxids\n#' species(taxo,sp.taxid)\n#' \n#' # same thing but returns results as a vector of scientific names\n#' species(taxo,sp.taxid,TRUE)\n#' \n#' @seealso class \\code{\\linkS4class{obitools.taxonomy}},\n#' and methods \\code{\\link{taxonatrank}},\\code{\\link{genus}},\n#' \\code{\\link{family}},\\code{\\link{kingdom}},\n#' \\code{\\link{superkingdom}}\n#' \n#' @docType methods\n#' @rdname species-methods\n#' @aliases species-methods,obitools.taxonomy\n#' @author Eric Coissac\n#' @keywords taxonomy\n#' \nsetMethod(\"species\", \"obitools.taxonomy\",function(taxonomy,taxid,name=FALSE) {\n  getsp = function(t)\t {\t\n    if (is.na(t))\n      return(NA)\n    else\n      return(.Call('R_get_species',\n                   taxonomy,\n                   t,\n                   name,\n                   PACKAGE=\"ROBITaxonomy\"))\n  }\n  \n  taxid = as.integer(taxid)\n  name  = as.logical(name[1])\n  sapply(taxid,getsp)\n})\n\n#' @export\nsetGeneric(\"genus\", function(taxonomy,taxid,name=FALSE) {\n  return(standardGeneric(\"genus\"))\n})\n\n#' Extracts the genus corresponding to a taxid\n#' \n#' The \\code{genus} method of \\code{\\linkS4class{obitools.taxonomy}} class\n#' returns the \\emph{taxid} or the scientific name of the genus corresponding \n#' to a \\emph{taxid}.\n#' \n#' @param   taxonomy a \\code{\\linkS4class{obitools.taxonomy}} instance\n#' @param   taxid a vector of taxid to analyse\n#' @param   name  A logical value \\code{TRUE} or \\code{FALSE} indicating \n#'          if the method return a taxid or a scientific name.\n#'          \n#' @return  \\describe{\n#'   \\item{If \\code{name==FALSE}}{the taxid of the corresponding \n#'                                taxon as an integer or a vector of integers \n#'                                if the \\code{taxid} argument is itself \n#'                                a vector}\n#'   \\item{If \\code{name==TRUE}}{the scientific name of the corresponding \n#'                               taxon as a string or a vector of string \n#'                               if the \\code{taxid} argument is itself \n#'                               a vector}\n#'  }\n#'  \n#' @examples\n#' # read the taxonomy database\n#' taxo=default.taxonomy()\n#' \n#' # build a vector of 6 taxids corresponding to species\n#' sp.taxid=c(7000,7004,7007,7009,7010,7011)\n#' \n#' # look for the genus taxids\n#' genus(taxo,sp.taxid)\n#' \n#' # same thing but returns results as a vector of scientific names\n#' genus(taxo,sp.taxid,TRUE)\n#' \n#' @seealso class \\code{\\linkS4class{obitools.taxonomy}},\n#' and methods \\code{\\link{species}},\\code{\\link{taxonatrank}},\n#' \\code{\\link{family}},\\code{\\link{kingdom}},\n#' \\code{\\link{superkingdom}}\n#' \n#' @docType methods\n#' @rdname genus-methods\n#' @aliases genus-methods,obitools.taxonomy\n#' @author Eric Coissac\n#' @keywords taxonomy\n#' \nsetMethod(\"genus\", \"obitools.taxonomy\",function(taxonomy,taxid,name=FALSE) {\n  getsp = function(t)\t {\t\n    if (is.na(t))\n      return(NA)\n    else\n      return(.Call('R_get_genus',\n                   taxonomy,\n                   t,\n                   name,\n                   PACKAGE=\"ROBITaxonomy\"))\n  }\n  \n  taxid = as.integer(taxid)\n  name  = as.logical(name[1])\n  sapply(taxid,getsp)\n})\n\n#' @export\nsetGeneric(\"family\", function(taxonomy,taxid,name=FALSE) {\n  return(standardGeneric(\"family\"))\n})\n\n#' Extracts the family corresponding to a taxid\n#' \n#' The \\code{family} method of \\code{\\linkS4class{obitools.taxonomy}} class\n#' returns the \\emph{taxid} or the scientific name of the family corresponding \n#' to a \\emph{taxid}.\n#' \n#' @param   taxonomy a \\code{\\linkS4class{obitools.taxonomy}} instance\n#' @param   taxid a vector of taxid to analyse\n#' @param   name  A logical value \\code{TRUE} or \\code{FALSE} indicating \n#'          if the method return a taxid or a scientific name.\n#'          \n#' @return  \\describe{\n#'   \\item{If \\code{name==FALSE}}{the taxid of the corresponding \n#'                                taxon as an integer or a vector of integers \n#'                                if the \\code{taxid} argument is itself \n#'                                a vector}\n#'   \\item{If \\code{name==TRUE}}{the scientific name of the corresponding \n#'                               taxon as a string or a vector of string \n#'                               if the \\code{taxid} argument is itself \n#'                               a vector}\n#'  }\n#'  \n#' @examples\n#' # read the taxonomy database\n#' taxo=default.taxonomy()\n#' \n#' # build a vector of 6 taxids corresponding to species\n#' sp.taxid=c(7000,7004,7007,7009,7010,7011)\n#' \n#' # look for the family taxids\n#' family(taxo,sp.taxid)\n#' \n#' # same thing but returns results as a vector of scientific names\n#' family(taxo,sp.taxid,TRUE)\n#' \n#' @seealso class \\code{\\linkS4class{obitools.taxonomy}},\n#' and methods \\code{\\link{species}},\\code{\\link{genus}},\n#' \\code{\\link{taxonatrank}},\\code{\\link{kingdom}},\n#' \\code{\\link{superkingdom}}\n#' \n#' @docType methods\n#' @rdname family-methods\n#' @aliases family-methods,obitools.taxonomy\n#' @author Eric Coissac\n#' @keywords taxonomy\n#' \nsetMethod(\"family\", \"obitools.taxonomy\",function(taxonomy,taxid,name=FALSE) {\n  getsp = function(t)\t {\t\n    if (is.na(t))\n      return(NA)\n    else\n      return(.Call('R_get_family',\n                   taxonomy,\n                   t,\n                   name,\n                   PACKAGE=\"ROBITaxonomy\"))\n  }\n  \n  taxid = as.integer(taxid)\n  name  = as.logical(name[1])\n  sapply(taxid,getsp)\n})\n\n#' @export\nsetGeneric(\"kingdom\", function(taxonomy,taxid,name=FALSE) {\n  return(standardGeneric(\"kingdom\"))\n})\n\n#' Extracts the kingdom corresponding to a taxid\n#' \n#' The \\code{kingdom} method of \\code{\\linkS4class{obitools.taxonomy}} class\n#' returns the \\emph{taxid} or the scientific name of the kingdom corresponding \n#' to a \\emph{taxid}.\n#' \n#' @param   taxonomy a \\code{\\linkS4class{obitools.taxonomy}} instance\n#' @param   taxid a vector of taxid to analyse\n#' @param   name  A logical value \\code{TRUE} or \\code{FALSE} indicating \n#'          if the method return a taxid or a scientific name.\n#'          \n#' @return  \\describe{\n#'   \\item{If \\code{name==FALSE}}{the taxid of the corresponding \n#'                                taxon as an integer or a vector of integers \n#'                                if the \\code{taxid} argument is itself \n#'                                a vector}\n#'   \\item{If \\code{name==TRUE}}{the scientific name of the corresponding \n#'                               taxon as a string or a vector of string \n#'                               if the \\code{taxid} argument is itself \n#'                               a vector}\n#'  }\n#'  \n#' @examples\n#' # read the taxonomy database\n#' taxo=default.taxonomy()\n#' \n#' # build a vector of 6 taxids corresponding to species\n#' sp.taxid=c(7000,7004,7007,7009,7010,7011)\n#' \n#' # look for the kingdom taxids\n#' kingdom(taxo,sp.taxid)\n#' \n#' # same thing but returns results as a vector of scientific names\n#' kingdom(taxo,sp.taxid,TRUE)\n#' \n#' @seealso class \\code{\\linkS4class{obitools.taxonomy}},\n#' and methods \\code{\\link{species}},\\code{\\link{genus}},\n#' \\code{\\link{family}},\\code{\\link{taxonatrank}},\n#' \\code{\\link{superkingdom}}\n#' \n#' @docType methods\n#' @rdname kingdom-methods\n#' @aliases kingdom-methods,obitools.taxonomy\n#' @author Eric Coissac\n#' @keywords taxonomy\n#' \nsetMethod(\"kingdom\", \"obitools.taxonomy\",function(taxonomy,taxid,name=FALSE) {\n  getsp = function(t)\t {\t\n    if (is.na(t))\n      return(NA)\n    else\n      return(.Call('R_get_kingdom',\n                   taxonomy,\n                   t,\n                   name,\n                   PACKAGE=\"ROBITaxonomy\"))\n  }\n  \n  taxid = as.integer(taxid)\n  name  = as.logical(name[1])\n  sapply(taxid,getsp)\n})\n\n#' @export\nsetGeneric(\"superkingdom\", function(taxonomy,taxid,name=FALSE) {\n  return(standardGeneric(\"superkingdom\"))\n})\n\n#' Extracts the superkingdom corresponding to a taxid\n#' \n#' The \\code{superkingdom} method of \\code{\\linkS4class{obitools.taxonomy}} class\n#' returns the \\emph{taxid} or the scientific name of the superkingdom corresponding \n#' to a \\emph{taxid}.\n#' \n#' @param   taxonomy a \\code{\\linkS4class{obitools.taxonomy}} instance\n#' @param   taxid a vector of taxid to analyse\n#' @param   name  A logical value \\code{TRUE} or \\code{FALSE} indicating \n#'          if the method return a taxid or a scientific name.\n#'          \n#' @return  \\describe{\n#'   \\item{If \\code{name==FALSE}}{the taxid of the corresponding \n#'                                taxon as an integer or a vector of integers \n#'                                if the \\code{taxid} argument is itself \n#'                                a vector}\n#'   \\item{If \\code{name==TRUE}}{the scientific name of the corresponding \n#'                               taxon as a string or a vector of string \n#'                               if the \\code{taxid} argument is itself \n#'                               a vector}\n#'  }\n#'  \n#' @examples\n#' # read the taxonomy database\n#' taxo=default.taxonomy()\n#' \n#' # build a vector of 6 taxids corresponding to species\n#' sp.taxid=c(7000,7004,7007,7009,7010,7011)\n#' \n#' # look for the superkingdom taxids\n#' superkingdom(taxo,sp.taxid)\n#' \n#' # same thing but returns results as a vector of scientific names\n#' superkingdom(taxo,sp.taxid,TRUE)\n#' \n#' @seealso class \\code{\\linkS4class{obitools.taxonomy}},\n#' and methods \\code{\\link{species}},\\code{\\link{genus}},\n#' \\code{\\link{family}},\\code{\\link{kingdom}},\n#' \\code{\\link{taxonatrank}}\n#' \n#' @docType methods\n#' @rdname superkingdom-methods\n#' @aliases superkingdom-methods,obitools.taxonomy\n#' @author Eric Coissac\n#' @keywords taxonomy\n#' \nsetMethod(\"superkingdom\", \"obitools.taxonomy\",function(taxonomy,taxid,name=FALSE) {\n  getsp = function(t)\t {\t\n    if (is.na(t))\n      return(NA)\n    else\n      return(.Call('R_get_superkingdom',\n                   taxonomy,\n                   t,\n                   name,\n                   PACKAGE=\"ROBITaxonomy\"))\n  }\n  \n  taxid = as.integer(taxid)\n  name  = as.logical(name[1])\n  sapply(taxid,getsp)\n})\n\n\n",
    "created" : 1497629103121.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3440825741",
    "id" : "60F70569",
    "lastKnownWriteTime" : 1452675950,
    "last_content_update" : 1452675950,
    "path" : "~/WORK/CIBIO/STATS_AND_CODE/OBITOOLS/ROBITOOLS/ROBITaxonomy-BAS/R/rank.R",
    "project_path" : "R/rank.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}