{
    "collab_server" : "",
    "contents" : "#' @include taxonomy.R\nNULL\n\n#' @export\nsetGeneric(\"scientificname\", function(taxonomy,taxid) {\n  return(standardGeneric(\"scientificname\"))\n})\n\n#' Returns the scientific name corresponding to a \\emph{NCBI taxid}\n#' \n#' \\code{scientificname} function in package \\pkg{\\link{ROBITaxonomy}} returns the \n#' scientific name corresponding to a \\emph{NCBI taxid}.\n#' \n#' @param   taxonomy a \\code{\\link{obitools.taxonomy}} instance\n#' @param   taxid an integer value or a vector of integer representing NCBI \n#'          taxonomic identifiers.\n#' @return  The scientific name of the corresponding taxon as a string or a \n#'          vector of string if the \\code{taxid} argument is itself a vector\n#' \n#' @examples\n#' # load the default taxonomy database include in the ROBITaxonomy library\n#' taxo=default.taxonomy()\n#' \n#' # build a vector of 6 taxids corresponding to species\n#' sp.taxid=c(7000,7004,7007,7009,7010,7011)\n#' \n#' # look for the scientific names correponding to these taxids\n#' scientificname(taxo,sp.taxid)\n#' \n#' @seealso class \\code{\\linkS4class{obitools.taxonomy}}\n#'          \n#'          \n#' @docType methods\n#' @rdname scientificname-methods\n#' @aliases scientificname-methods,obitools.taxonomy\n#' @author Eric Coissac\n#' \nsetMethod(\"scientificname\", \"obitools.taxonomy\",function(taxonomy,taxid) {\n  getscname = function(t)  {\t\n    if (is.na(t))\n      return(NA)\n    else\n      return(\t.Call('R_get_scientific_name',\n                    taxonomy,\n                    t,\n                    PACKAGE=\"ROBITaxonomy\"))\n  }\n  \n  taxid = as.integer(taxid)\n  sapply(taxid,getscname)\n})\n\n\n######################################################################\n######################################################################\n\n\n#' @export\nsetGeneric(\"parent\", function(taxonomy,taxid,name=FALSE) {\n  return(standardGeneric(\"parent\"))\n})\n\n#' Returns the parent taxon corresponding to a \\emph{NCBI taxid}\n#' \n#' \\code{parent} function in package \\pkg{\\link{ROBITaxonomy}} returns the \n#' parent taxon corresponding to a \\emph{NCBI taxid}.\n#' \n#' @param   taxonomy a \\code{\\link{obitools.taxonomy}} instance\n#' @param   taxid an integer value or a vector of integer representing NCBI \n#'          taxonomic identifiers.\n#' @param   name A logical value \\code{TRUE} or \\code{FALSE} indicating if the \n#'          method returns a taxid or a scientific name.\n#'                            \n#' @return  \\describe{ \\item{If \\code{name==FALSE}}{the taxid of the \n#'                            parent taxon as an integer or a vector of \n#'                            integers if the \\code{taxid} argument is itself \n#'                            a vector} \n#'                      \\item{If \\code{name==TRUE}}{the scientific name of the\n#'                            parent taxon as a string or a vector of \n#'                            string if  the \\code{taxid} argument is itself a \n#'                            vector} }\n#' \n#' @examples\n#' # load the default taxonomy database include in the ROBITaxonomy library\n#' taxo=default.taxonomy()\n#' \n#' # build a vector of 6 taxids corresponding to species\n#' sp.taxid=c(7000,7004,7007,7009,7010,7011)\n#' \n#' # look for the parent taxa correponding to these taxids\n#' parent(taxo,sp.taxid)\n#' \n#' # same things but scientific names are returned\n#' parent(taxo,sp.taxid,TRUE)\n#' \n#' @seealso class \\code{\\linkS4class{obitools.taxonomy}}\n#'          \n#'          \n#' @docType methods\n#' @rdname parent-methods\n#' @aliases parent-methods,obitools.taxonomy\n#' @author Eric Coissac\n#' \nsetMethod(\"parent\", \"obitools.taxonomy\",function(taxonomy,taxid,name=FALSE) {\n  getp = function(t)\t {\t\n    if (is.na(t))\n      return(NA)\n    else\n      return(.Call('R_get_parent',\n                   taxonomy,\n                   as.integer(t),\n                   name,\n                   PACKAGE=\"ROBITaxonomy\"))\n  }\n  \n  taxid = as.integer(taxid)\n  name  = as.logical(name[1])\n  sapply(taxid,getp)\n})\n\n\n\n######################################################################\n######################################################################\n\n\n\n#' @export\nsetGeneric(\"taxid.list\", function(taxonomy) {\n  return(standardGeneric(\"taxid.list\"))\n})\n\n\n#' Returns the list of all taxids belonging the taxonomy.\n#'  \n#' \\code{taxid.list} returns the list of all taxids included in the\n#' instance of the class \\code{\\linkS4class{obitools.taxonomy}}\n#' \n#' @param taxonomy the \\code{\\linkS4class{obitools.taxonomy}} to use.\n#' \n#' @return an \\code{integer} vector containing the list of taxids.\n#' \n#' @examples\n#' # loads the default taxonomy database\n#' taxo=default.taxonomy()\n#' \n#' # returns the count of taxa described in the taxonomy\n#' length(taxo)\n#' \n#' # extracts the list of all valid taxids\n#' good = taxid.list(taxo)\n#' \n#' # returns the size of the returned list\n#' length(good)\n#' \n#' @seealso \\code{\\linkS4class{obitools.taxonomy}}\n#' \n#' @author Eric Coissac\n#' @keywords taxonomy\n#' @docType methods\n#' @rdname taxid.list-method\n#' @aliases taxid.list\n#' \nsetMethod(\"taxid.list\", \"obitools.taxonomy\",\n          function(taxonomy) {\n            return(.Call('R_taxid_list',\n                         taxonomy,\n                         PACKAGE=\"ROBITaxonomy\"))\n          })\n\n######################################################################\n######################################################################\n\n\n\n#' Returns the count of taxa in the taxonomy.\n#'  \n#' \\code{length} returns the count of taxa included in the\n#' instance of the class \\code{\\linkS4class{obitools.taxonomy}}\n#' \n#' @param x the \\code{\\linkS4class{obitools.taxonomy}} to use.\n#' \n#' @return an \\code{integer} corresponding to the count of taxa.\n#' \n#' @examples\n#' # loads the default taxonomy database\n#' taxo=default.taxonomy()\n#' \n#' # returns the count of taxa described in the taxonomy\n#' length(taxo)\n#' \n#' @seealso \\code{\\link{length}}, \\code{\\linkS4class{obitools.taxonomy}}\n#' \n#' @author Eric Coissac\n#' @keywords taxonomy\n#' @export  length.obitools.taxonomy\n#' \nlength.obitools.taxonomy = function(x) \n{\n  return(.Call('R_length_taxonomy',\n               x,\n               PACKAGE=\"ROBITaxonomy\"))\n}\n\n\n######################################################################\n######################################################################\n\nsetGeneric('max')  \t\n\n#' Returns the maximum taxid in the taxonomy.\n#'  \n#' \\code{length} returns the maximum taxid included in the\n#' instance of the class \\code{\\linkS4class{obitools.taxonomy}}\n#' \n#' @param taxonomy the \\code{\\linkS4class{obitools.taxonomy}} to use.\n#' @param na.rm included for compatibility purpose, this parameter as\n#'              no effect on this implementation of \\code{max}\n#' \n#' @return an \\code{integer} corresponding to the count of taxa.\n#' \n#' @examples\n#' # load the default taxonomy database\n#' taxo=default.taxonomy()\n#' \n#' # gets the larger taxid of the database\n#' max(taxo)\n#' \n#' @seealso \\code{\\link{max}}, \\code{\\linkS4class{obitools.taxonomy}}\n#' \n#' @author Eric Coissac\n#' @keywords taxonomy\n#' @export  max.obitools.taxonomy\n#' \nmax.obitools.taxonomy=function(taxonomy,na.rm = FALSE) {\n  return(.Call('R_max_taxid',\n               taxonomy,\n               PACKAGE=\"ROBITaxonomy\"))\n}\n\n#' @export\nsetGeneric(\"ecofind\", function(taxonomy,patterns,rank=NULL,alternative=FALSE) {\n  return(standardGeneric(\"ecofind\"))\n})\n\n#' Returns taxids associated to the names\n#' \n#' Return the set of taxids having their name matching the given pattern.\n#' \n#' @param taxonomy the \\code{\\linkS4class{obitools.taxonomy}} to use.\n#' @param patterns one or several regular pattern used to select the the taxa.\n#' @param   rank a \\code{character} indicating a taxonomic rank. If not \\code{NULL}\n#'               only taxids correponding to this rank are returned.\n#' @param   alternative  A logical value \\code{TRUE} or \\code{FALSE} indicating \n#'          if the function must only look for a scientific name.\n#' \n#' @return if just one pattern is given, an integer vector is returned with the\n#'         corresponding taxids. If a list of patterns is given, the function\n#'         returns a list of integer vectors, each vector containing the taxids\n#'         corresponding to a pattern. The returned list is in the same order \n#'         than the given patern list.\n#' \n#' @examples\n#' # load the default taxonomy database\n#' taxo=default.taxonomy()\n#' \n#' # retreives the Vertebrata taxid\n#' taxid = ecofind(taxo,\"Vertebrata\")\n#' \n#' taxid\n#' scientificname(taxo,taxid)\n#' \n#' \n#' taxid = ecofind(taxo,\"^Vertebrata$\")\n#' \n#' taxid\n#' scientificname(taxo,taxid)\n#' \n#'\n#' @author Eric Coissac\n#' @keywords taxonomy\n#' @docType methods\n#' @rdname ecofind-method\n#' @aliases ecofind,obitools.taxonomy\n#' \nsetMethod(\"ecofind\", \"obitools.taxonomy\",function(taxonomy,patterns,rank=NULL,alternative=FALSE) {\n  getp = function(t)   {\t\n    if (is.na(t))\n      return(NA)\n    else\n      return(unique(.Call('R_ecofind',\n                          taxonomy,\n                          t,\n                          rank,\n                          alternative,\n                          PACKAGE=\"ROBITaxonomy\")))\n  }\n  \n  patterns = as.character(patterns)\n  taxid=lapply(patterns,getp)\n  if (length(taxid)==1)\n    taxid=taxid[[1]]\n  \n  return(taxid)\n})\n\n\n\n#' @export\nsetGeneric(\"validate\", function(taxonomy,taxid) {\n  return(standardGeneric(\"validate\"))\n})\n\n#' Checks that a \\emph{taxid} is really present in taxonomy\n#' \n#' \\code{validate} function in package \\pkg{\\link{ROBITaxonomy}} checks \n#' that a \\emph{taxid} is declared in the considered taxonomy.\n#' \n#' @param   taxonomy a \\code{\\link{obitools.taxonomy}} instance\n#' @param   taxid an integer value or a vector of integer representing NCBI \n#'          taxonomic identifiers.\n#'                            \n#' @return  The taxid if it exists, NA otherwise. If the input taxid is a \n#'          vector of integer returns an integer vector composed of validated\n#'          taxids and NA values.\n#' \n#' @examples\n#' # load the default taxonomy database include in the ROBITaxonomy library\n#' taxo=default.taxonomy()\n#' \n#' # build a vector of 101 taxids \n#' sp.taxid=c(7000:7100)\n#' \n#' # checks the list of taxids\n#' validate(taxo,sp.taxid)\n#' \n#' @seealso class \\code{\\linkS4class{obitools.taxonomy}}\n#'          \n#'          \n#' @docType methods\n#' @rdname validate-methods\n#' @aliases validate-methods,obitools.taxonomy\n#' @author Eric Coissac\n#' \nsetMethod(\"validate\", \"obitools.taxonomy\",function(taxonomy,taxid) {\n  getp = function(t)   {  \n    if (is.na(t))\n      return(NA)\n    else\n      return(.Call('R_validate_taxid',\n                   taxonomy,\n                   t,\n                   PACKAGE=\"ROBITaxonomy\"))\n  }\n  \n  taxid = as.integer(taxid)\n  sapply(taxid,getp)\n})\n\n",
    "created" : 1497629094618.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2346017305",
    "id" : "9DBCFF58",
    "lastKnownWriteTime" : 1452675950,
    "last_content_update" : 1452675950,
    "path" : "~/WORK/CIBIO/STATS_AND_CODE/OBITOOLS/ROBITOOLS/ROBITaxonomy-BAS/R/basic.R",
    "project_path" : "R/basic.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}